=begin
#DocuSign Click API

#Elastic signing (also known as DocuSign Click)  lets you capture consent to standard agreement terms with a single click: terms and conditions, terms of service, terms of use, privacy policies, and more. The Click API lets you include this customizable elastic template solution in your DocuSign integrations.

OpenAPI spec version: v1
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module DocuSign_Click

  class DeleteClickwrapOptions
    # A comma-separated list of versions to delete.
    attr_accessor :versions

    def self.default
      @@default ||= DeleteClickwrapOptions.new
    end
  end

  class DeleteClickwrapVersionsOptions
    # A comma-separated list of clickwrap version IDs to delete.
    attr_accessor :clickwrap_version_ids

    def self.default
      @@default ||= DeleteClickwrapVersionsOptions.new
    end
  end

  class DeleteClickwrapsOptions
    # A comma-separated list of clickwrap IDs to delete.
    attr_accessor :clickwrap_ids

    def self.default
      @@default ||= DeleteClickwrapsOptions.new
    end
  end

  class GetAgreementPdfOptions
    # When **true,** the Certificate of Completion will be appended to the PDF. The default value is **false.**
    attr_accessor :include_coc

    def self.default
      @@default ||= GetAgreementPdfOptions.new
    end
  end

  class GetClickwrapAgreementsOptions
    # The client user ID to filter to a single user's agreements.
    attr_accessor :client_user_id

    # The earliest date to return agreements from.
    attr_accessor :from_date

    # The results for this endpoint are paginated. Use this parameter to indicate which page to return. The `minimumPagesRemaining` value in the response indicates whether to continue querying for additional pages.  For example, if the page size is 40: * If this property is set to 0 (the default), the endpoint returns results 1-40. * If this property is set to 1, the endpoint returns results 41-80.  The default value is 0. 
    attr_accessor :page_number

    # User agreement status. One of:  - `created` - `agreed` - `declined`
    attr_accessor :status

    # The latest date to return agreements from.
    attr_accessor :to_date

    def self.default
      @@default ||= GetClickwrapAgreementsOptions.new
    end
  end

  class GetClickwrapVersionAgreementsOptions
    # The client user ID to filter to a single user's agreements.
    attr_accessor :client_user_id

    # The earliest date to return agreements from.
    attr_accessor :from_date

    # The results for this endpoint are paginated. Use this parameter to indicate which page to return. The `minimumPagesRemaining` value in the response indicates whether to continue querying for additional pages.  For example, if the page size is 40: * If this property is set to 0 (the default), the endpoint returns results 1-40. * If this property is set to 1, the endpoint returns results 41-80.  The default value is 0. 
    attr_accessor :page_number

    # User agreement status. One of:  - `created` - `agreed` - `declined`
    attr_accessor :status

    # The latest date to return agreements from.
    attr_accessor :to_date

    def self.default
      @@default ||= GetClickwrapVersionAgreementsOptions.new
    end
  end

  class GetClickwrapsOptions
    # Names of columns by which to filter and values to match on.
    attr_accessor :filter

    # The earliest date to return clickwraps from.
    attr_accessor :from_date

    # The name of the clickwraps to return.
    attr_accessor :name

    # The user ID of the owner.
    attr_accessor :owner_user_id

    # The results for this endpoint are paginated. Use this parameter to indicate which page to return. The `minimumPagesRemaining` value in the response indicates whether to continue querying for additional pages.  For example, if the page size is 40: * If this property is set to 0 (the default), the endpoint returns results 1-40. * If this property is set to 1, the endpoint returns results 41-80.  The default value is 0. 
    attr_accessor :page_number

    # The status of the clickwraps to filter by. One of:  - `active` - `inactive`  
    attr_accessor :status

    # The latest date to return clickwraps from.
    attr_accessor :to_date

    def self.default
      @@default ||= GetClickwrapsOptions.new
    end
  end


  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = AccountsApi.default)
      @api_client = api_client
    end

    # Starts an export of clickwrap agreements for a specified date range.
    # Starts an asynchronus process to export clickwrap agreements for a specified date range. An email will be sent to the creator after it has been processed.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param bulk_clickwrap_request Data used to start a bulk agreements export. (optional parameter)
    # @return [nil]
    def create_bulk_clickwrap_agreements(account_id, clickwrap_id, bulk_clickwrap_request)
      create_bulk_clickwrap_agreements_with_http_info(account_id, clickwrap_id,  bulk_clickwrap_request)
      return nil
    end

    # Starts an export of clickwrap agreements for a specified date range.
    # Starts an asynchronus process to export clickwrap agreements for a specified date range. An email will be sent to the creator after it has been processed.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param bulk_clickwrap_request Data used to start a bulk agreements export. (optional parameter)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_bulk_clickwrap_agreements_with_http_info(account_id, clickwrap_id, bulk_clickwrap_request)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_bulk_clickwrap_agreements ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.create_bulk_clickwrap_agreements" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.create_bulk_clickwrap_agreements" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/bulk_agreements".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bulk_clickwrap_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_bulk_clickwrap_agreements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a clickwrap for an account.
    # Creates a clickwrap for an account.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_request Request body for working with clickwrap. (optional parameter)
    # @return [ClickwrapVersionSummaryResponse]
    def create_clickwrap(account_id, clickwrap_request)
      data, _status_code, _headers = create_clickwrap_with_http_info(account_id,  clickwrap_request)
      return data
    end

    # Creates a clickwrap for an account.
    # Creates a clickwrap for an account.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_request Request body for working with clickwrap. (optional parameter)
    # @return [Array<(ClickwrapVersionSummaryResponse, Fixnum, Hash)>] ClickwrapVersionSummaryResponse data, response status code and response headers
    def create_clickwrap_with_http_info(account_id, clickwrap_request)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_clickwrap ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.create_clickwrap" if account_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(clickwrap_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionSummaryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_clickwrap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new clickwrap version.
    # Creates a new version of an existing clickwrap. In a new version, you can replace the uploaded documents, change the display settings, and change the name of the clickwrap. The version number is automatically incremented based on the last version of the clickwrap.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param clickwrap_request Request body for working with clickwrap. (optional parameter)
    # @return [ClickwrapVersionSummaryResponse]
    def create_clickwrap_version(account_id, clickwrap_id, clickwrap_request)
      data, _status_code, _headers = create_clickwrap_version_with_http_info(account_id, clickwrap_id,  clickwrap_request)
      return data
    end

    # Creates a new clickwrap version.
    # Creates a new version of an existing clickwrap. In a new version, you can replace the uploaded documents, change the display settings, and change the name of the clickwrap. The version number is automatically incremented based on the last version of the clickwrap.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param clickwrap_request Request body for working with clickwrap. (optional parameter)
    # @return [Array<(ClickwrapVersionSummaryResponse, Fixnum, Hash)>] ClickwrapVersionSummaryResponse data, response status code and response headers
    def create_clickwrap_version_with_http_info(account_id, clickwrap_id, clickwrap_request)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_clickwrap_version ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.create_clickwrap_version" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.create_clickwrap_version" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(clickwrap_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionSummaryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_clickwrap_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a unique URL for the agreement that you can embed in your application.
    # Creates a unique URL for the agreement that you can embed in your application.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage` and `click.send`.  The request must include at least the `clientUserId`. This is a value that you generate to identify the unique recipient of the agreement.  If you are using a [dynamic content][] document, you can supply the values in the documentData property of the request, like this:  ```json {   \"clientUserId\": \"cl-bc7f-48a9\",   \"documentData\": {     \"fullName\": \"T. J. Fanning\",     \"email\": \"tj@example.com\",     \"company\": \"Fanning Indusdtries\",     \"title\": \"Cat wrangler\",     \"date\": \"2022-10-13T05:17:14-07:00\"   } } ```  A response will look like this. The `agreementUrl` is unique to the user identified by the `clientUserId`. Your user can open the URL to approve the agreement. The `documentData` property appears only if you provided it in the request.  ```json {   \"accountId\": \"624e3e00-xxxx-xxxx-xxxx-43918c520dab\",   \"clickwrapId\": \"0e64e4a7-xxxx-xxxx-xxxx-ce5a93b162af\",   \"clientUserId\": \"tcl-bc7f-48a9j\",   \"agreementId\": \"1f346c7d-xxxx-xxxx-xxxx-a5c968666785\",   \"documents\": [ . . .],   \"consumerDisclosureEnabled\": true,   \"agreementUrl\": \"https://demo.docusign.net/clickapi/v1/redeem?agreementToken=AcTZT8g ... cxEqrUsA1lQ8DPPy05dE0\",   \"createdOn\": \"2022-10-20T16:27:25.1287685Z\",   \"status\": \"created\",   \"versionId\": \"5957716d-xxxx-xxxx-xxxx-e1594f00ff12\",   \"versionNumber\": 1,   \"settings\": {     \"displayName\": \"Agree with me\",     \"hasDeclineButton\": true,     .  . .     \"statementAlignment\": \"bottom\"   },   \"documentData\": {     \"fullName\": \"T. J. Fanning\",     \"email\": \"tj@example.com\",     \"company\": \"Fanning Indusdtries\",     \"title\": \"Cat wrangler\",     \"date\": \"2022-10-13T05:17:14-07:00\"   } } ```  This method returns the following result codes and response bodies depending on whether the user has agreed.   | Agreed | Response code | Response body          | | :----- | :------------ | :--------------------- | | No     | 201           | Full response as above | | Yes    | 200           | No response (empty)    |   ### Related topics  - [Add dynamic content to your clickwrap][dynamic content] - [How to embed a clickwrap][embed-howto]   [dynamic content]:  /docs/click-api/click101/customize-clickwrap-fields/#add-dynamic-content-to-your-clickwrap [embedding]:        /docs/click-api/click101/customize-clickwrap-fields/#embed-clickwraps-that-contain-dynamic-content [embed-howto]:      /docs/click-api/how-to/embed-clickwraps/ 
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param user_agreement_request Data used to create the agreement. (optional parameter)
    # @return [UserAgreementResponse]
    def create_has_agreed(account_id, clickwrap_id, user_agreement_request)
      data, _status_code, _headers = create_has_agreed_with_http_info(account_id, clickwrap_id,  user_agreement_request)
      return data
    end

    # Creates a unique URL for the agreement that you can embed in your application.
    # Creates a unique URL for the agreement that you can embed in your application.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60; and &#x60;click.send&#x60;.  The request must include at least the &#x60;clientUserId&#x60;. This is a value that you generate to identify the unique recipient of the agreement.  If you are using a [dynamic content][] document, you can supply the values in the documentData property of the request, like this:  &#x60;&#x60;&#x60;json {   \&quot;clientUserId\&quot;: \&quot;cl-bc7f-48a9\&quot;,   \&quot;documentData\&quot;: {     \&quot;fullName\&quot;: \&quot;T. J. Fanning\&quot;,     \&quot;email\&quot;: \&quot;tj@example.com\&quot;,     \&quot;company\&quot;: \&quot;Fanning Indusdtries\&quot;,     \&quot;title\&quot;: \&quot;Cat wrangler\&quot;,     \&quot;date\&quot;: \&quot;2022-10-13T05:17:14-07:00\&quot;   } } &#x60;&#x60;&#x60;  A response will look like this. The &#x60;agreementUrl&#x60; is unique to the user identified by the &#x60;clientUserId&#x60;. Your user can open the URL to approve the agreement. The &#x60;documentData&#x60; property appears only if you provided it in the request.  &#x60;&#x60;&#x60;json {   \&quot;accountId\&quot;: \&quot;624e3e00-xxxx-xxxx-xxxx-43918c520dab\&quot;,   \&quot;clickwrapId\&quot;: \&quot;0e64e4a7-xxxx-xxxx-xxxx-ce5a93b162af\&quot;,   \&quot;clientUserId\&quot;: \&quot;tcl-bc7f-48a9j\&quot;,   \&quot;agreementId\&quot;: \&quot;1f346c7d-xxxx-xxxx-xxxx-a5c968666785\&quot;,   \&quot;documents\&quot;: [ . . .],   \&quot;consumerDisclosureEnabled\&quot;: true,   \&quot;agreementUrl\&quot;: \&quot;https://demo.docusign.net/clickapi/v1/redeem?agreementToken&#x3D;AcTZT8g ... cxEqrUsA1lQ8DPPy05dE0\&quot;,   \&quot;createdOn\&quot;: \&quot;2022-10-20T16:27:25.1287685Z\&quot;,   \&quot;status\&quot;: \&quot;created\&quot;,   \&quot;versionId\&quot;: \&quot;5957716d-xxxx-xxxx-xxxx-e1594f00ff12\&quot;,   \&quot;versionNumber\&quot;: 1,   \&quot;settings\&quot;: {     \&quot;displayName\&quot;: \&quot;Agree with me\&quot;,     \&quot;hasDeclineButton\&quot;: true,     .  . .     \&quot;statementAlignment\&quot;: \&quot;bottom\&quot;   },   \&quot;documentData\&quot;: {     \&quot;fullName\&quot;: \&quot;T. J. Fanning\&quot;,     \&quot;email\&quot;: \&quot;tj@example.com\&quot;,     \&quot;company\&quot;: \&quot;Fanning Indusdtries\&quot;,     \&quot;title\&quot;: \&quot;Cat wrangler\&quot;,     \&quot;date\&quot;: \&quot;2022-10-13T05:17:14-07:00\&quot;   } } &#x60;&#x60;&#x60;  This method returns the following result codes and response bodies depending on whether the user has agreed.   | Agreed | Response code | Response body          | | :----- | :------------ | :--------------------- | | No     | 201           | Full response as above | | Yes    | 200           | No response (empty)    |   ### Related topics  - [Add dynamic content to your clickwrap][dynamic content] - [How to embed a clickwrap][embed-howto]   [dynamic content]:  /docs/click-api/click101/customize-clickwrap-fields/#add-dynamic-content-to-your-clickwrap [embedding]:        /docs/click-api/click101/customize-clickwrap-fields/#embed-clickwraps-that-contain-dynamic-content [embed-howto]:      /docs/click-api/how-to/embed-clickwraps/ 
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param user_agreement_request Data used to create the agreement. (optional parameter)
    # @return [Array<(UserAgreementResponse, Fixnum, Hash)>] UserAgreementResponse data, response status code and response headers
    def create_has_agreed_with_http_info(account_id, clickwrap_id, user_agreement_request)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_has_agreed ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.create_has_agreed" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.create_has_agreed" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/agreements".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(user_agreement_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAgreementResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_has_agreed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a clickwrap and all of its versions.
    # Deletes the clickwrap specified by `clickwrapId` and all of its versions. Active clickwraps are not deleted  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param DocuSign_Click::DeleteClickwrapOptions Options for modifying the behavior of the function.
    # @return [ClickwrapVersionsDeleteResponse]
    def delete_clickwrap(account_id, clickwrap_id, options = DocuSign_Click::DeleteClickwrapOptions.default)
      data, _status_code, _headers = delete_clickwrap_with_http_info(account_id, clickwrap_id, options)
      return data
    end

    # Deletes a clickwrap and all of its versions.
    # Deletes the clickwrap specified by &#x60;clickwrapId&#x60; and all of its versions. Active clickwraps are not deleted  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param DocuSign_Click::DeleteClickwrapOptions Options for modifying the behavior of the function.
    # @return [Array<(ClickwrapVersionsDeleteResponse, Fixnum, Hash)>] ClickwrapVersionsDeleteResponse data, response status code and response headers
    def delete_clickwrap_with_http_info(account_id, clickwrap_id, options = DocuSign_Click::DeleteClickwrapOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.delete_clickwrap ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_clickwrap" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.delete_clickwrap" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'versions'] = options.versions if !options.versions.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionsDeleteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_clickwrap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a clickwrap version by version ID.
    # Deletes the clickwrap version specified by `versionId` of the clickwrap specified by `clickwrapId`.  **Note:** This endpoint requires the version ID (a GUID), not the version number (an integer).  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param version_id The ID of the clickwrap version.
    # @return [ClickwrapVersionDeleteResponse]
    def delete_clickwrap_version(account_id, clickwrap_id, version_id)
      data, _status_code, _headers = delete_clickwrap_version_with_http_info(account_id, clickwrap_id, version_id)
      return data
    end

    # Deletes a clickwrap version by version ID.
    # Deletes the clickwrap version specified by &#x60;versionId&#x60; of the clickwrap specified by &#x60;clickwrapId&#x60;.  **Note:** This endpoint requires the version ID (a GUID), not the version number (an integer).  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param version_id The ID of the clickwrap version.
    # @return [Array<(ClickwrapVersionDeleteResponse, Fixnum, Hash)>] ClickwrapVersionDeleteResponse data, response status code and response headers
    def delete_clickwrap_version_with_http_info(account_id, clickwrap_id, version_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.delete_clickwrap_version ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_clickwrap_version" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.delete_clickwrap_version" if clickwrap_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling AccountsApi.delete_clickwrap_version" if version_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionDeleteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_clickwrap_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the versions of a clickwrap.
    # Deletes all versions of a clickwrap, or only the ones specified in the `clickwrapVersionIds` query parameter.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param DocuSign_Click::DeleteClickwrapVersionsOptions Options for modifying the behavior of the function.
    # @return [ClickwrapVersionsDeleteResponse]
    def delete_clickwrap_versions(account_id, clickwrap_id, options = DocuSign_Click::DeleteClickwrapVersionsOptions.default)
      data, _status_code, _headers = delete_clickwrap_versions_with_http_info(account_id, clickwrap_id, options)
      return data
    end

    # Deletes the versions of a clickwrap.
    # Deletes all versions of a clickwrap, or only the ones specified in the &#x60;clickwrapVersionIds&#x60; query parameter.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param DocuSign_Click::DeleteClickwrapVersionsOptions Options for modifying the behavior of the function.
    # @return [Array<(ClickwrapVersionsDeleteResponse, Fixnum, Hash)>] ClickwrapVersionsDeleteResponse data, response status code and response headers
    def delete_clickwrap_versions_with_http_info(account_id, clickwrap_id, options = DocuSign_Click::DeleteClickwrapVersionsOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.delete_clickwrap_versions ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_clickwrap_versions" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.delete_clickwrap_versions" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'clickwrapVersionIds'] = options.clickwrap_version_ids if !options.clickwrap_version_ids.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionsDeleteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_clickwrap_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes clickwraps for an account.
    # Deletes all clickwraps for an account or only the ones specified in the `clickwrapIds` query parameter.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param DocuSign_Click::DeleteClickwrapsOptions Options for modifying the behavior of the function.
    # @return [ClickwrapsDeleteResponse]
    def delete_clickwraps(account_id, options = DocuSign_Click::DeleteClickwrapsOptions.default)
      data, _status_code, _headers = delete_clickwraps_with_http_info(account_id, options)
      return data
    end

    # Deletes clickwraps for an account.
    # Deletes all clickwraps for an account or only the ones specified in the &#x60;clickwrapIds&#x60; query parameter.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param DocuSign_Click::DeleteClickwrapsOptions Options for modifying the behavior of the function.
    # @return [Array<(ClickwrapsDeleteResponse, Fixnum, Hash)>] ClickwrapsDeleteResponse data, response status code and response headers
    def delete_clickwraps_with_http_info(account_id, options = DocuSign_Click::DeleteClickwrapsOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.delete_clickwraps ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.delete_clickwraps" if account_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'clickwrapIds'] = options.clickwrap_ids if !options.clickwrap_ids.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapsDeleteResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_clickwraps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a specific agreement for a specified clickwrap.
    # Gets the agreement specified by `agreementId`.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage` or `click.send`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param agreement_id The agreement ID.
    # @param clickwrap_id The ID of the clickwrap.
    # @return [UserAgreementResponse]
    def get_agreement(account_id, agreement_id, clickwrap_id)
      data, _status_code, _headers = get_agreement_with_http_info(account_id, agreement_id, clickwrap_id)
      return data
    end

    # Gets a specific agreement for a specified clickwrap.
    # Gets the agreement specified by &#x60;agreementId&#x60;.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60; or &#x60;click.send&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param agreement_id The agreement ID.
    # @param clickwrap_id The ID of the clickwrap.
    # @return [Array<(UserAgreementResponse, Fixnum, Hash)>] UserAgreementResponse data, response status code and response headers
    def get_agreement_with_http_info(account_id, agreement_id, clickwrap_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_agreement ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_agreement" if account_id.nil?
      # verify the required parameter 'agreement_id' is set
      fail ArgumentError, "Missing the required parameter 'agreement_id' when calling AccountsApi.get_agreement" if agreement_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.get_agreement" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/agreements/{agreementId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'agreementId' + '}', agreement_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserAgreementResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Downloads a document at an order within the agreement.
    # Downloads a specific document from the agreement presented to the user.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.sign`
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param order_or_disclosure The order of the document or consumer_disclosure.
    # @param version_id The ID of the clickwrap version.
    # @return [Document]
    def get_agreement_document(account_id, clickwrap_id, order_or_disclosure, version_id)
      data, _status_code, _headers = get_agreement_document_with_http_info(account_id, clickwrap_id, order_or_disclosure, version_id)
      return data
    end

    # Downloads a document at an order within the agreement.
    # Downloads a specific document from the agreement presented to the user.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.sign&#x60;
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param order_or_disclosure The order of the document or consumer_disclosure.
    # @param version_id The ID of the clickwrap version.
    # @return [Array<(Document, Fixnum, Hash)>] Document data, response status code and response headers
    def get_agreement_document_with_http_info(account_id, clickwrap_id, order_or_disclosure, version_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_agreement_document ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_agreement_document" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.get_agreement_document" if clickwrap_id.nil?
      # verify the required parameter 'order_or_disclosure' is set
      fail ArgumentError, "Missing the required parameter 'order_or_disclosure' when calling AccountsApi.get_agreement_document" if order_or_disclosure.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling AccountsApi.get_agreement_document" if version_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}/documents/{orderOrDisclosure}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s).sub('{' + 'orderOrDisclosure' + '}', order_or_disclosure.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Document')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_agreement_document\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the completed user agreement PDF.
    # Gets the PDF of  `agreementId` for the clickwrap specified by `clickwrapId`.  The response to this method is the bytes of the PDF file. The response includes the HTTP header `application/pdf`.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage` or `click.send`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param agreement_id The agreement ID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param DocuSign_Click::GetAgreementPdfOptions Options for modifying the behavior of the function.
    # @return [File]
    def get_agreement_pdf(account_id, agreement_id, clickwrap_id, options = DocuSign_Click::GetAgreementPdfOptions.default)
      data, _status_code, _headers = get_agreement_pdf_with_http_info(account_id, agreement_id, clickwrap_id, options)
      return data
    end

    # Gets the completed user agreement PDF.
    # Gets the PDF of  &#x60;agreementId&#x60; for the clickwrap specified by &#x60;clickwrapId&#x60;.  The response to this method is the bytes of the PDF file. The response includes the HTTP header &#x60;application/pdf&#x60;.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60; or &#x60;click.send&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param agreement_id The agreement ID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param DocuSign_Click::GetAgreementPdfOptions Options for modifying the behavior of the function.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_agreement_pdf_with_http_info(account_id, agreement_id, clickwrap_id, options = DocuSign_Click::GetAgreementPdfOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_agreement_pdf ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_agreement_pdf" if account_id.nil?
      # verify the required parameter 'agreement_id' is set
      fail ArgumentError, "Missing the required parameter 'agreement_id' when calling AccountsApi.get_agreement_pdf" if agreement_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.get_agreement_pdf" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/agreements/{agreementId}/download".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'agreementId' + '}', agreement_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include_coc'] = options.include_coc if !options.include_coc.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/pdf'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_agreement_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a  single clickwrap object.
    # Retrieves the definition of the specified clickwrap.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @return [ClickwrapVersionResponse]
    def get_clickwrap(account_id, clickwrap_id)
      data, _status_code, _headers = get_clickwrap_with_http_info(account_id, clickwrap_id)
      return data
    end

    # Gets a  single clickwrap object.
    # Retrieves the definition of the specified clickwrap.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @return [Array<(ClickwrapVersionResponse, Fixnum, Hash)>] ClickwrapVersionResponse data, response status code and response headers
    def get_clickwrap_with_http_info(account_id, clickwrap_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_clickwrap ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_clickwrap" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.get_clickwrap" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_clickwrap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get user agreements
    # Retrieves the user agreements for a specified clickwrap. Each `userAgreementResponse` object describes a single user's response to the clickwrap. You can also filter the agreements by date, status, page number, and client user ID.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param DocuSign_Click::GetClickwrapAgreementsOptions Options for modifying the behavior of the function.
    # @return [ClickwrapAgreementsResponse]
    def get_clickwrap_agreements(account_id, clickwrap_id, options = DocuSign_Click::GetClickwrapAgreementsOptions.default)
      data, _status_code, _headers = get_clickwrap_agreements_with_http_info(account_id, clickwrap_id, options)
      return data
    end

    # Get user agreements
    # Retrieves the user agreements for a specified clickwrap. Each &#x60;userAgreementResponse&#x60; object describes a single user&#39;s response to the clickwrap. You can also filter the agreements by date, status, page number, and client user ID.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param DocuSign_Click::GetClickwrapAgreementsOptions Options for modifying the behavior of the function.
    # @return [Array<(ClickwrapAgreementsResponse, Fixnum, Hash)>] ClickwrapAgreementsResponse data, response status code and response headers
    def get_clickwrap_agreements_with_http_info(account_id, clickwrap_id, options = DocuSign_Click::GetClickwrapAgreementsOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_clickwrap_agreements ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_clickwrap_agreements" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.get_clickwrap_agreements" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/users".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'client_user_id'] = options.client_user_id if !options.client_user_id.nil?
      query_params[:'from_date'] = options.from_date if !options.from_date.nil?
      query_params[:'page_number'] = options.page_number if !options.page_number.nil?
      query_params[:'status'] = options.status if !options.status.nil?
      query_params[:'to_date'] = options.to_date if !options.to_date.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapAgreementsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_clickwrap_agreements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a specific version of a clickwrap by version ID.
    # Gets the version specified by `versionId`  from the clickwrap `clickwrapId`.  **Note:** This endpoint requires the version ID (a GUID), not the version number (an integer).  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param version_id The ID of the clickwrap version.
    # @return [ClickwrapVersionResponse]
    def get_clickwrap_version(account_id, clickwrap_id, version_id)
      data, _status_code, _headers = get_clickwrap_version_with_http_info(account_id, clickwrap_id, version_id)
      return data
    end

    # Gets a specific version of a clickwrap by version ID.
    # Gets the version specified by &#x60;versionId&#x60;  from the clickwrap &#x60;clickwrapId&#x60;.  **Note:** This endpoint requires the version ID (a GUID), not the version number (an integer).  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param version_id The ID of the clickwrap version.
    # @return [Array<(ClickwrapVersionResponse, Fixnum, Hash)>] ClickwrapVersionResponse data, response status code and response headers
    def get_clickwrap_version_with_http_info(account_id, clickwrap_id, version_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_clickwrap_version ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_clickwrap_version" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.get_clickwrap_version" if clickwrap_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling AccountsApi.get_clickwrap_version" if version_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_clickwrap_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the agreement responses for a clickwrap version by version ID.
    # Gets the agreement responses for a specific version.  **Note:** This endpoint requires the version ID (a GUID), not the version number (an integer).  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param version_id The ID of the clickwrap version.
    # @param DocuSign_Click::GetClickwrapVersionAgreementsOptions Options for modifying the behavior of the function.
    # @return [ClickwrapAgreementsResponse]
    def get_clickwrap_version_agreements(account_id, clickwrap_id, version_id, options = DocuSign_Click::GetClickwrapVersionAgreementsOptions.default)
      data, _status_code, _headers = get_clickwrap_version_agreements_with_http_info(account_id, clickwrap_id, version_id, options)
      return data
    end

    # Gets the agreement responses for a clickwrap version by version ID.
    # Gets the agreement responses for a specific version.  **Note:** This endpoint requires the version ID (a GUID), not the version number (an integer).  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param version_id The ID of the clickwrap version.
    # @param DocuSign_Click::GetClickwrapVersionAgreementsOptions Options for modifying the behavior of the function.
    # @return [Array<(ClickwrapAgreementsResponse, Fixnum, Hash)>] ClickwrapAgreementsResponse data, response status code and response headers
    def get_clickwrap_version_agreements_with_http_info(account_id, clickwrap_id, version_id, options = DocuSign_Click::GetClickwrapVersionAgreementsOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_clickwrap_version_agreements ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_clickwrap_version_agreements" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.get_clickwrap_version_agreements" if clickwrap_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling AccountsApi.get_clickwrap_version_agreements" if version_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}/users".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'client_user_id'] = options.client_user_id if !options.client_user_id.nil?
      query_params[:'from_date'] = options.from_date if !options.from_date.nil?
      query_params[:'page_number'] = options.page_number if !options.page_number.nil?
      query_params[:'status'] = options.status if !options.status.nil?
      query_params[:'to_date'] = options.to_date if !options.to_date.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapAgreementsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_clickwrap_version_agreements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all the versions of a clickwrap.
    # Gets all the versions of a clickwrap for an account.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @return [ClickwrapVersionsPagedResponse]
    def get_clickwrap_versions(account_id, clickwrap_id)
      data, _status_code, _headers = get_clickwrap_versions_with_http_info(account_id, clickwrap_id)
      return data
    end

    # Gets all the versions of a clickwrap.
    # Gets all the versions of a clickwrap for an account.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @return [Array<(ClickwrapVersionsPagedResponse, Fixnum, Hash)>] ClickwrapVersionsPagedResponse data, response status code and response headers
    def get_clickwrap_versions_with_http_info(account_id, clickwrap_id)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_clickwrap_versions ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_clickwrap_versions" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.get_clickwrap_versions" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionsPagedResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_clickwrap_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all the clickwraps for a user.
    # Gets all the clickwraps for a user.   **Note:** This endpoint returns a list of `clickwrapVersionSummaryResponse` objects. Each version of each clickwrap is returned as a separate entry in the list.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`. 
    # @param account_id The external account number (int) or account ID GUID.
    # @param DocuSign_Click::GetClickwrapsOptions Options for modifying the behavior of the function.
    # @return [ClickwrapVersionsResponse]
    def get_clickwraps(account_id, options = DocuSign_Click::GetClickwrapsOptions.default)
      data, _status_code, _headers = get_clickwraps_with_http_info(account_id, options)
      return data
    end

    # Gets all the clickwraps for a user.
    # Gets all the clickwraps for a user.   **Note:** This endpoint returns a list of &#x60;clickwrapVersionSummaryResponse&#x60; objects. Each version of each clickwrap is returned as a separate entry in the list.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;. 
    # @param account_id The external account number (int) or account ID GUID.
    # @param DocuSign_Click::GetClickwrapsOptions Options for modifying the behavior of the function.
    # @return [Array<(ClickwrapVersionsResponse, Fixnum, Hash)>] ClickwrapVersionsResponse data, response status code and response headers
    def get_clickwraps_with_http_info(account_id, options = DocuSign_Click::GetClickwrapsOptions.default)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_clickwraps ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.get_clickwraps" if account_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'filter'] = options.filter if !options.filter.nil?
      query_params[:'from_date'] = options.from_date if !options.from_date.nil?
      query_params[:'name'] = options.name if !options.name.nil?
      query_params[:'ownerUserId'] = options.owner_user_id if !options.owner_user_id.nil?
      query_params[:'page_number'] = options.page_number if !options.page_number.nil?
      query_params[:'status'] = options.status if !options.status.nil?
      query_params[:'to_date'] = options.to_date if !options.to_date.nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_clickwraps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the current version and other information about the Click API.
    # The response includes information about the Click API, including the service version, build version, and linked sites.  This method does not require authentication.
    # @return [ServiceInformation]
    def get_service_information()
      data, _status_code, _headers = get_service_information_with_http_info()
      return data
    end

    # Gets the current version and other information about the Click API.
    # The response includes information about the Click API, including the service version, build version, and linked sites.  This method does not require authentication.
    # @return [Array<(ServiceInformation, Fixnum, Hash)>] ServiceInformation data, response status code and response headers
    def get_service_information_with_http_info()
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_service_information ..."
      end
      # resource path
      local_var_path = "/service_information".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ServiceInformation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_service_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a clickwrap by ID.
    # Update a subset of properties on the clickwrap.  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param clickwrap_transfer_request Data used to transfer a clickwrap from one user to another. (optional parameter)
    # @return [ClickwrapVersionSummaryResponse]
    def update_clickwrap(account_id, clickwrap_id, clickwrap_transfer_request)
      data, _status_code, _headers = update_clickwrap_with_http_info(account_id, clickwrap_id,  clickwrap_transfer_request)
      return data
    end

    # Update a clickwrap by ID.
    # Update a subset of properties on the clickwrap.  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param clickwrap_transfer_request Data used to transfer a clickwrap from one user to another. (optional parameter)
    # @return [Array<(ClickwrapVersionSummaryResponse, Fixnum, Hash)>] ClickwrapVersionSummaryResponse data, response status code and response headers
    def update_clickwrap_with_http_info(account_id, clickwrap_id, clickwrap_transfer_request)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.update_clickwrap ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_clickwrap" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.update_clickwrap" if clickwrap_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(clickwrap_transfer_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionSummaryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_clickwrap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates clickwrap version status and ownership.
    # Updates the clickwrap version status and ownership by transferring from previous user ID to new user ID.  **Note:** This endpoint requires the version ID (a GUID), not the version number (an integer).  [Required authentication scopes](/docs/click-api/click101/auth/): `click.manage`.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param version_id The ID of the clickwrap version.
    # @param clickwrap_request Request body for working with clickwrap. (optional parameter)
    # @return [ClickwrapVersionSummaryResponse]
    def update_clickwrap_version(account_id, clickwrap_id, version_id, clickwrap_request)
      data, _status_code, _headers = update_clickwrap_version_with_http_info(account_id, clickwrap_id, version_id,  clickwrap_request)
      return data
    end

    # Updates clickwrap version status and ownership.
    # Updates the clickwrap version status and ownership by transferring from previous user ID to new user ID.  **Note:** This endpoint requires the version ID (a GUID), not the version number (an integer).  [Required authentication scopes](/docs/click-api/click101/auth/): &#x60;click.manage&#x60;.
    # @param account_id The external account number (int) or account ID GUID.
    # @param clickwrap_id The ID of the clickwrap.
    # @param version_id The ID of the clickwrap version.
    # @param clickwrap_request Request body for working with clickwrap. (optional parameter)
    # @return [Array<(ClickwrapVersionSummaryResponse, Fixnum, Hash)>] ClickwrapVersionSummaryResponse data, response status code and response headers
    def update_clickwrap_version_with_http_info(account_id, clickwrap_id, version_id, clickwrap_request)
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.update_clickwrap_version ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountsApi.update_clickwrap_version" if account_id.nil?
      # verify the required parameter 'clickwrap_id' is set
      fail ArgumentError, "Missing the required parameter 'clickwrap_id' when calling AccountsApi.update_clickwrap_version" if clickwrap_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling AccountsApi.update_clickwrap_version" if version_id.nil?
      # resource path
      local_var_path = "/v1/accounts/{accountId}/clickwraps/{clickwrapId}/versions/{versionId}".sub('{format}','json').sub('{' + 'accountId' + '}', account_id.to_s).sub('{' + 'clickwrapId' + '}', clickwrap_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(clickwrap_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClickwrapVersionSummaryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_clickwrap_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end